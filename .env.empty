# There are a ton of environment variables needed to keep different services
#   talking securely to each other.
# Each of the variables needed are documented here, and how they were created
#   or chosen will be shown.
# This is a shell script fragment that is expected to be sourced when the
#   commands requiring these environment variables are run.
# References to source files is provided where possible.

if [ "$(uname)" = "Darwin" ]; then
	BASE64="base64"
elif [ "$(uname)" = "Linux" ]; then
	BASE64="base64 -w 0"
else
	echo >&2 "Unknown host. Default base64 command to \"base64\""
	BASE64="base64"
fi

# VM Management stuff
export VM_ROOT_PASSWORD=$(uuidgen)
export VM_MANAGEMENT_PASSWORD=$(uuidgen)

# MetalLB
# Needs to be double-base64ed, because the expected environment variable
#   itself should be base64ed.
export METALLB_SYSTEM_MEMBERLIST_SECRET_KEY_BASE64="$(openssl rand -base64 128 | tr -d '\n' | $BASE64 | tr -d '\n')"

# The docker registry requires some credentials to be set up to allow users to
#   pull and push images.
# These values are pushed to the cluster in several different ways.
#   1. htpasswd file is used to tell the service what credentials exist
#   2. docker pulls performed by the cluster need to be executed using a set of
#      credentials.
#   3. A set of credentials is pushed for local use as well.
# A docker login command should be run on dev machines to get them ready to
#   push images to the container registry.
# This login script is written to $DOCKER_LOGIN_SCRIPT, and can be evaled
#   directly when needed.
export DOCKER_REGISTRY_HOSTNAME=registry.internal.aleemhaji.com
DOCKER_KUBERNETES_USERNAME=kubernetes
DOCKER_KUBERNETES_PASSWORD=$(uuidgen)
DOCKER_CONSUMER_USERNAME=aleem
DOCKER_CONSUMER_PASSWORD=$(uuidgen)

# The following are generated from what's provided above
DOCKER_HTPASSWD_FILE_CONTENTS=$(
	htpasswd -nbB -C 10 $DOCKER_KUBERNETES_USERNAME $DOCKER_KUBERNETES_PASSWORD | sed '/^ *$/d' &&
	htpasswd -nbB -C 10 $DOCKER_CONSUMER_USERNAME $DOCKER_CONSUMER_PASSWORD | sed '/^ *$/d'
)
DOCKER_CONFIG_JSON_CONTENTS="{\"auths\":{\"$DOCKER_REGISTRY_HOSTNAME\":{\"username\":\"$DOCKER_KUBERNETES_USERNAME\",\"password\":\"$DOCKER_KUBERNETES_PASSWORD\",\"auth\":\"$(echo -n $DOCKER_KUBERNETES_USERNAME:$DOCKER_KUBERNETES_PASSWORD | $BASE64)\"}}}"

export DOCKER_HTPASSWD_FILE_CONTENTS_BASE64=$(echo "$DOCKER_HTPASSWD_FILE_CONTENTS" | $BASE64)
export DOCKER_CONFIG_JSON_FILE_CONTENTS_BASE64=$(echo "$DOCKER_CONFIG_JSON_CONTENTS" | $BASE64)

export DOCKER_LOGIN_SCRIPT="docker login $DOCKER_REGISTRY_HOSTNAME --username \$DOCKER_CONSUMER_USERNAME --password \$DOCKER_CONSUMER_PASSWORD"


# Slack configurations include channel IDs that the bot will send messages to,
#   as well as the bot's API key.
SLACK_BOT_API_KEY=xoxb-a-bunch-of-stuff-from-slack
export SLACK_BOT_DEFAULT_CHANNEL=COPIEDFROMCHANNELURL
export SLACK_BOT_ALERTING_CHANNEL=COPIEDFROMCHANNELURL

export SLACK_BOT_API_KEY_BASE64=$(echo -n "$SLACK_BOT_API_KEY" | $BASE64)


# Firefly
export FIREFLY_MYSQL_USER=firefly
export FIREFLY_MYSQL_DATABASE=firefly
FIREFLY_MYSQL_PASSWORD=$(uuidgen)
FIREFLY_APP_KEY=$(openssl rand -hex 16)
FIREFLY_DATA_IMPORTER_KEY="FROMFFIII"

export FIREFLY_MYSQL_PASSWORD_BASE64=$(echo -n "$FIREFLY_MYSQL_PASSWORD" | $BASE64)
export FIREFLY_APP_KEY_BASE64=$(echo -n "$FIREFLY_APP_KEY" | $BASE64)
export FIREFLY_DATA_IMPORTER_KEY_BASE64=$(echo -n "$FIREFLY_DATA_IMPORTER_KEY" | $BASE64)


# Guacamole
export GUACAMOLE_MYSQL_USER=guacamole
export GUACAMOLE_MYSQL_DATABASE="guacamole?enabledTLSProtocols=TLSv1.2"
GUACAMOLE_MYSQL_PASSWORD=$(uuidgen)

export GUACAMOLE_MYSQL_PASSWORD_BASE64=$(echo -n "$GUACAMOLE_MYSQL_PASSWORD" | $BASE64)


# Node-RED
export NODE_RED_MYSQL_USER=nodered
export NODE_RED_MYSQL_DATABASE=nodered
NODE_RED_MYSQL_PASSWORD=$(uuidgen)

export NODE_RED_MYSQL_PASSWORD_BASE64=$(echo -n "$NODE_RED_MYSQL_PASSWORD" | $BASE64)


# Postgres
POSTGRES_ROOT_PASSWORD=$(uuidgen)

export POSTGRES_ROOT_PASSWORD_BASE64=$(echo -n "$POSTGRES_ROOT_PASSWORD" | $BASE64)


# MySQL
MYSQL_ROOT_PASSWORD=$(uuidgen)

export MYSQL_ROOT_PASSWORD_BASE64=$(echo -n "$MYSQL_ROOT_PASSWORD" | $BASE64)


# DNS Updates
NAMESILO_API_KEY="<from namesilo>"

export NAMESILO_API_KEY_BASE64=$(echo -n "$NAMESILO_API_KEY" | $BASE64)


# Remindmebot
export REMINDMEBOT_USERNAME=remindmebot

REMINDMEBOT_API_KEY="<from Kik>"
REMINDMEBOT_DATABASE=mongodb://mongo/remindmebot

export REMINDMEBOT_API_KEY_BASE64=$(echo -n "$REMINDMEBOT_API_KEY" | $BASE64)
export REMINDMEBOT_DATABASE_BASE64=$(echo -n "$REMINDMEBOT_DATABASE" | $BASE64)


# Tedbot
SLACK_TEDBOT_APP_WEBHOOK="https://hooks.slack.com/services/<Stuff from Slack>"

export SLACK_TEDBOT_APP_WEBHOOK_BASE64=$(echo -n "$SLACK_TEDBOT_APP_WEBHOOK" | $BASE64)


# Blobstore
BLOBSTORE_DATABASE=mongodb://mongo/blobstore

export BLOBSTORE_DATABASE_BASE64=$(echo -n "$BLOBSTORE_DATABASE" | $BASE64)


# Webcomics
WEBCOMICS_DATABASE=mongodb://mongo/webcomics

export WEBCOMICS_DATABASE_BASE64=$(echo -n "$WEBCOMICS_DATABASE" | $BASE64)


# Bitwarden
BITWARDEN_ADMIN_TOKEN=$(uuidgen)

export BITWARDEN_ADMIN_TOKEN_BASE64=$(echo -n "$BITWARDEN_ADMIN_TOKEN" | $BASE64)


# Drone
DRONE_CONNECTION_STRING="postgresql://postgres:${POSTGRES_ROOT_PASSWORD}@postgres/drone"
DRONE_RPC_SECRET=$(uuidgen)
DRONE_GITEA_CLIENT_ID=#from gitea
DRONE_GITEA_CLIENT_SECRET=#from gitea

export DRONE_CONNECTION_STRING_BASE64=$(echo -n "$DRONE_CONNECTION_STRING" | $BASE64)
export DRONE_RPC_SECRET_BASE64=$(echo -n "$DRONE_RPC_SECRET" | $BASE64)
export DRONE_GITEA_CLIENT_ID_BASE64=$(echo -n "$DRONE_GITEA_CLIENT_ID" | $BASE64)
export DRONE_GITEA_CLIENT_SECRET_BASE64=$(echo -n "$DRONE_GITEA_CLIENT_SECRET" | $BASE64)


# Wireguard
export WIREGUARD_SERVER_PRIVATE_KEY="$(wg genkey)"
WIREGUARD_SERVER_PUBLIC_KEY="$(wg pubkey <<< "$WIREGUARD_SERVER_PRIVATE_KEY")"

WIREGUARD_PEER_1_PRIVATE_KEY="$(wg genkey)"
export WIREGUARD_PEER_1_PUBLIC_KEY="$(wg pubkey <<< "$WIREGUARD_PEER_1_PRIVATE_KEY")"


export DEV_SSH_KEY_BASE64="$($BASE64 ~/.ssh/id_rsa)"
export DEV_SSH_PUBLIC_KEY_BASE64="$($BASE64 ~/.ssh/id_rsa.pub)"
export DEV_KNOWN_HOSTS_BASE64="$($BASE64 ~/.ssh/known_hosts)"


# RabbitMQ
RMQ_USERNAME=admin
RMQ_PASSWORD=$(uuidgen)
RMQ_ERLANG_COOKIE=generated-string
RMQ_CONNECTION_STRING="amqp://$RMQ_USERNAME:$RMQ_PASSWORD@rabbitmq-0.rabbitmq"

export RMQ_USERNAME_BASE64="$(echo -n "$RMQ_USERNAME" | $BASE64)"
export RMQ_PASSWORD_BASE64="$(echo -n "$RMQ_PASSWORD" | $BASE64)"
export RMQ_ERLANG_COOKIE_BASE64="$(echo -n "$RMQ_ERLANG_COOKIE" | $BASE64)"
export RMQ_CONNECTION_STRING_BASE64="$(echo -n "$RMQ_CONNECTION_STRING" | $BASE64)"
