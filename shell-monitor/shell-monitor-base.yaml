apiVersion: v1
kind: ServiceAccount
metadata:
  name: shell-monitor
  namespace: ${SHELL_MONITOR_NAMESPACE}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: shell-monitor
  namespace: ${SHELL_MONITOR_NAMESPACE}
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - create
  - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: shell-monitor
  namespace: ${SHELL_MONITOR_NAMESPACE}
subjects:
- kind: ServiceAccount
  name: shell-monitor
roleRef:
  kind: Role
  name: shell-monitor
  apiGroup: rbac.authorization.k8s.io
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: shell-monitor-base-config
  namespace: ${SHELL_MONITOR_NAMESPACE}
  labels:
    app: shell-monitor-base-script
data:
  script.sh: |
    #!/usr/bin/env bash
    #
    # Monitor the output of a shell script, and if the value ever changes, send a
    #   message via. Slack to notify of the change.
    set -eufo pipefail

    TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

    DATA_KEY=value
    PARENT_RESOURCE="https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/${SHELL_MONITOR_NAMESPACE}/configmaps"
    FULL_RESOURCE="$PARENT_RESOURCE/$CONFIG_MAP_NAME"
    RESOURCE_PATH="${SHELL_MONITOR_NAMESPACE}/$CONFIG_MAP_NAME"

    SLACK_URL="https://slackbot.internal.aleemhaji.com/message"

    slack() {
        curl -sS -X POST -H "X-SLACK-CHANNEL-ID: ${SLACK_BOT_ALERTING_CHANNEL}" -d "$@" "$SLACK_URL"
    }

    get_value() {
      curl -fsS -H "Authorization: Bearer $TOKEN" --insecure "$FULL_RESOURCE" | jq -r ".data.$DATA_KEY"
    }

    set_value() {
      curl -fsS -XPATCH -H "Content-Type: application/merge-patch+json" -H "Authorization: Bearer $TOKEN" -d '{
        "data": {
          "'"$DATA_KEY"'": "'"${1:1:-1}"'"
        }
      }' --insecure "$FULL_RESOURCE"
    }

    # Check to see if the ConfigMap already exists.
    # If not, create it.
    set +e
    current_value="$(get_value)"
    ec="$?"
    set -e

    if [ "$ec" -ne 0 ]; then
      curl -fsS -XPOST -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" -d '{
        "kind": "ConfigMap",
        "apiVersion": "v1",
        "metadata": {
          "name": "'"$CONFIG_MAP_NAME"'"
        }
      }' --insecure "$PARENT_RESOURCE"
      slack "Monitor for $RESOURCE_PATH created new ConfigMap."
    else
      echo >&2 "Script starting up watching $RESOURCE_PATH."
      echo >&2 "Skipping notification to avoid noise."
    fi

    while true; do
      new_value="$($UPDATE_SCRIPT | jq -R -s '.')"

      if [ "$new_value" != "$current_value" ]; then
        set_value "$new_value"
        current_value="$new_value"
        slack "Monitor changed value of $RESOURCE_PATH to: $(echo $current_value | jq -r '.')"
      fi

      sleep "$UPDATE_INTERVAL"
    done
