# I really don't have a good reason for having implemented this the way I did.
# This just kind of felt fun at the time, and it worked.
apiVersion: v1
kind: ConfigMap
metadata:
  name: openvpn-as-init-scripts
data:
  00-wait-for-sacli.sh: |
    until /usr/local/openvpn_as/scripts/sacli status; do echo "Waiting for server to start..."; sleep 1; done
  10-set-authenticator-required.sh: |
    /usr/local/openvpn_as/scripts/sacli --key vpn.server.google_auth.enable --value true ConfigPut
  20-disable-port-sharing.sh: |
    /usr/local/openvpn_as/scripts/sacli --key vpn.server.port_share.enable --value false ConfigPut
    /usr/local/openvpn_as/scripts/sacli --key vpn.server.port_share.service --value custom ConfigPut
  30-set-client-port.sh: |
    /usr/local/openvpn_as/scripts/sacli --key admin_ui.https.port --value 943 ConfigPut
    /usr/local/openvpn_as/scripts/sacli --key cs.https.port --value 944 ConfigPut
  40-set-vpn-network-rules.sh: |
    /usr/local/openvpn_as/scripts/sacli --key vpn.server.routing.private_network.0 --value 192.168.1.0/24 ConfigPut
    /usr/local/openvpn_as/scripts/sacli --key vpn.server.routing.private_network.1 --value 192.168.2.0/24 ConfigPut

    /usr/local/openvpn_as/scripts/sacli --key vpn.client.routing.reroute_dns --value custom ConfigPut
    /usr/local/openvpn_as/scripts/sacli --key vpn.server.dhcp_option.dns.0 --value 192.168.1.1 ConfigPut

    /usr/local/openvpn_as/scripts/sacli --key host.name --value ${OPENVPN_AS_HOSTNAME} ConfigPut
  50-set-user-configs.sh: |
    /usr/local/openvpn_as/scripts/sacli --user __DEFAULT__ --key def_deny --value true UserPropPut
    /usr/local/openvpn_as/scripts/sacli --user __DEFAULT__ --key prop_deny --value true UserPropPut

    /usr/local/openvpn_as/scripts/sacli --user ${OPENVPN_PRIMARY_USERNAME} --key type --value user_connect UserPropPut
    /usr/local/openvpn_as/scripts/sacli --user ${OPENVPN_PRIMARY_USERNAME} --key prop_superuser --value true UserPropPut
    /usr/local/openvpn_as/scripts/sacli --user ${OPENVPN_PRIMARY_USERNAME} --key prop_deny --value false UserPropPut
    /usr/local/openvpn_as/scripts/sacli --user ${OPENVPN_PRIMARY_USERNAME} --key prop_autologin --value true UserPropPut
    /usr/local/openvpn_as/scripts/sacli --user ${OPENVPN_PRIMARY_USERNAME} --new_pass ${OPENVPN_PRIMARY_USERPASS} SetLocalPassword
  60-enable-2fa.sh: |
    # Only recreate 2fa secret if there isn't already one set.
    if [ -z "$(/usr/local/openvpn_as/scripts/sacli --user ${OPENVPN_PRIMARY_USERNAME} UserPropGet | grep '"pvt_google_auth_secret"' | awk '{print $2}' | tr -cd '[[:alnum:]]')" ]; then
      /usr/local/openvpn_as/scripts/sacli --user ${OPENVPN_PRIMARY_USERNAME} GoogleAuthRegen
      /usr/local/openvpn_as/scripts/sacli --user ${OPENVPN_PRIMARY_USERNAME} --lock 1 GoogleAuthLock

      echo "User account has been created and password, and MFA have been set."
      echo "The user ${OPENVPN_PRIMARY_USERNAME}'s MFA code can be scanned here:"

      totp_token=$(/usr/local/openvpn_as/scripts/sacli --user ${OPENVPN_PRIMARY_USERNAME} UserPropGet | grep '"pvt_google_auth_secret"' | awk '{print $2}' | tr -cd '[[:alnum:]]')
      echo "https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=otpauth%3A//totp/${OPENVPN_PRIMARY_USERNAME}%2540OpenVPN%3Fsecret%3D${totp_token}&choe=UTF-8"
    fi
  70-disable-built-in-users.sh: |
    # Remove user accounts created during first boot.
    sed -i -r 's/^(boot_pam_service.*)/# \1/g' /config/etc/as.conf
    sed -i -r 's/^(boot_pam_users.*)/# \1/g' /config/etc/as.conf

    echo "admin:${OPENVPN_PRIMARY_USERPASS}" | chpasswd

    /usr/local/openvpn_as/scripts/sacli --user admin UserPropDelAll || true
    /usr/local/openvpn_as/scripts/sacli --user openvpn UserPropDelAll || true

    passwd -d openvpn
  80-generate-ssl-certs.sh: |
    # By default, these ship with the base image.
    /usr/local/openvpn_as/scripts/certool -d /usr/local/openvpn_as/etc/web-ssl --type ca --unique --cn "OpenVpn Aleem Home"
    /usr/local/openvpn_as/scripts/certool -d /usr/local/openvpn_as/etc/web-ssl --type server --remove_csr --sn_off --serial 1 --name server --cn ${OPENVPN_AS_HOSTNAME}
  90-reset-server.sh: |
    # Required to reliably persist configuration changes.
    /usr/local/openvpn_as/scripts/sacli Reset
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: openvpnas-deployment
  labels:
    app: openvpnas
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app: openvpnas
  template:
    metadata:
      labels:
        app: openvpnas
    spec:
      containers:
        - name: openvpnas
          image: linuxserver/openvpn-as:2.7.3-ls21
          ports:
            - containerPort: 9443
            - containerPort: 943
            - containerPort: 944
            - containerPort: 1194
          env:
            - name: OPENVPN_PRIMARY_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: openvpn-config
                  key: username
            - name: OPENVPN_AS_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: openvpn-config
                  key: hostname
            - name: OPENVPN_PRIMARY_USERPASS
              valueFrom:
                secretKeyRef:
                  name: openvpn-secrets
                  key: password
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: openvpnas-persistent-storage
              mountPath: /config
            - name: openvpn-as-init-scripts
              mountPath: /scripts
      volumes:
        - name: openvpnas-persistent-storage
          nfs:
            server: 192.168.96.4
            path: /mnt/main/apps/openvpn-as
        - name: openvpn-as-init-scripts
          projected:
            sources:
              - configMap:
                  name: openvpn-as-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: openvpnas-tcp
  labels:
    app: openvpnas
spec:
  ports:
    - port: 943
      protocol: TCP
      name: admin
    - port: 944
      protocol: TCP
      name: client
    - port: 9443
      protocol: TCP
      name: vpntcp
  type: NodePort
  selector:
    app: openvpnas
---
apiVersion: v1
kind: Service
metadata:
  name: openvpnas-udp
  labels:
    app: openvpnas
spec:
  ports:
    - port: 1194
      protocol: UDP
  type: NodePort
  selector:
    app: openvpnas
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: openvpnas-ingress-redirect
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/temporal-redirect: https://openvpnas.internal.aleemhaji.com
spec:
  rules:
    - host: openvpnas
    - host: openvpnas.home
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: openvpn-as-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/backend-protocol: "https"
spec:
  tls:
    - hosts:
        - openvpnas.internal.aleemhaji.com
      secretName: internal-certificate-files
  rules:
    - host: openvpnas.internal.aleemhaji.com
      http:
        paths:
          - path: /
            backend:
              serviceName: openvpnas-tcp
              servicePort: 943
