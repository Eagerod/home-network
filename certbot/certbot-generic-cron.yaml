# The certbot update itself doesn't require any kind of special Kubernetes
#   access, but the process that copies the secrets from the file share to
#   Kubernetes' Secrets store does need to make API calls to Kubernetes.
# Create an account, and give it the ability to read and write Secrets in the
#   namespace this cron will copy data to.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certbot
  namespace: ${KUBERNETES_NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: certbot-role
  namespace: ${KUBERNETES_NAMESPACE}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "patch", "create"]  # Might actually be able to remove "list"?
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: certbot-manage-secrets
  namespace: ${KUBERNETES_NAMESPACE}
subjects:
  - kind: ServiceAccount
    name: certbot
roleRef:
  kind: Role
  name: certbot-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: certbot-update-script
  namespace: ${KUBERNETES_NAMESPACE}
data:
  update-secrets.sh: |
    #!/usr/bin/env sh
    #
    # Update secrets
    set -e

    TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

    INTERNAL_WILDCARD_SECRET_NAME=internal-certificate-files
    INTERNAL_WILDCARD_COMBINED_SECRET_NAME=internal-certificate-file
    INTERNAL_WILDCARD_ARCHIVE=/etc/letsencrypt/archive/internal.aleemhaji.com-0001

    WILDCARD_SECRET_NAME=external-certificate-files
    WILDCARD_COMBINED_SECRET_NAME=external-certificate-file
    WILDCARD_ARCHIVE=/etc/letsencrypt/archive/aleemhaji.com-0001

    replace_certificates() {
        if [ -z $1 ] || [ -z $2 ]; then
            echo >&2 "Can't replace certs because cert name or path isn't present"
            exit 1
        fi

        cert_name="$1"
        cert_path="$2"

        rsa_keyfile="$(mktemp).rsa.key"

        echo "Updating ${KUBERNETES_NAMESPACE}/$cert_name..."
        openssl rsa -in $(find "$cert_path" -iname "privkey*.pem" | sort -n | tail -1) -out "$rsa_keyfile"

        # Try to create the secret in case this is the first time the script
        #   is being run.
        # If the create fails, run the patch attempt.
        /scripts/post.py \
          "Bearer $TOKEN" \
          '
          {
            "apiVersion":"v1",
            "kind":"Secret",
            "metadata":{"annotations":{},"name":"'$cert_name'"},
            "data":{
              "tls.crt": "'$(base64 $(find "$cert_path" -iname "fullchain*.pem" | sort -n | tail -1) | tr -d '\n')'",
              "tls.key": "'$(base64 $(find "$cert_path" -iname "privkey*.pem" | sort -n | tail -1) | tr -d '\n')'",
              "tls.rsa.key": "'$(base64 "$rsa_keyfile" | tr -d '\n')'"
            }
          }
          ' \
          "https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/${KUBERNETES_NAMESPACE}/secrets" || \
        /scripts/patch.py \
            "Bearer $TOKEN" \
            '
            {
                "data":{
                    "tls.crt": "'$(base64 $(find "$cert_path" -iname "fullchain*.pem" | sort -n | tail -1) | tr -d '\n')'",
                    "tls.key": "'$(base64 $(find "$cert_path" -iname "privkey*.pem" | sort -n | tail -1) | tr -d '\n')'",
                    "tls.rsa.key": "'$(base64 "$rsa_keyfile" | tr -d '\n')'"
                }
            }' \
            "https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/${KUBERNETES_NAMESPACE}/secrets/$cert_name"

        rm $rsa_keyfile
    }

    replace_combined_certificate() {
        if [ -z $1 ] || [ -z $2 ]; then
            echo >&2 "Can't replace certs because cert name or path isn't present"
            exit 1
        fi

        cert_name="$1"
        cert_path="$2"

        combined_file="$(mktemp).pem"

        echo "Updating ${KUBERNETES_NAMESPACE}/$cert_name..."
        cat \
            $(find "$cert_path" -iname "fullchain*.pem" | sort -n | tail -1) \
            $(find "$cert_path" -iname "privkey*.pem" | sort -n | tail -1) > $combined_file

        # Try to create the secret in case this is the first time the script
        #   is being run.
        # If the create fails, run the patch attempt.
        /scripts/post.py \
          "Bearer $TOKEN" \
          '
          {
            "apiVersion":"v1",
            "kind":"Secret",
            "metadata":{"annotations":{},"name":"'$cert_name'"},
            "data":{
              "keycert.pem": "'$(base64 "$combined_file" | tr -d '\n')'"
            }
          }
          ' \
          "https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/${KUBERNETES_NAMESPACE}/secrets" || \
        /scripts/patch.py \
            "Bearer $TOKEN" \
            '
            {
                "data":{
                    "keycert.pem": "'$(base64 "$combined_file" | tr -d '\n')'"
                }
            }' \
            "https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/${KUBERNETES_NAMESPACE}/secrets/$cert_name"

        rm $combined_file
    }

    replace_certificates "$INTERNAL_WILDCARD_SECRET_NAME" "$INTERNAL_WILDCARD_ARCHIVE"
    replace_combined_certificate "$INTERNAL_WILDCARD_COMBINED_SECRET_NAME" "$INTERNAL_WILDCARD_ARCHIVE"
    if ${INCLUDE_EXTERNAL_CERTS}; then
      replace_certificates "$WILDCARD_SECRET_NAME" "$WILDCARD_ARCHIVE"
      replace_combined_certificate "$WILDCARD_COMBINED_SECRET_NAME" "$WILDCARD_ARCHIVE"
    fi
  patch.py: |
    #!/usr/bin/env python
    #
    # This is a stupid python script I have to write because the certbot image
    #   doesn't come with curl installed, and the wget binary bundled with the
    #   busybox distro it's built off of doesn't seem to support different HTTP
    #   methods.
    # There may be a way to get around it, but the time to figure that out probably
    #   isn't worth it.
    import sys

    import requests

    if __name__ == '__main__':
      if len(sys.argv) != 4:
        print('Usage:', sys.argv[0], 'auth_header', 'patch_body', 'host')

      auth_header, patch_body, host = sys.argv[1:]

      response = requests.patch(
        url=host,
        verify=False,
        headers={
          'Authorization': auth_header,
          'Content-Type': 'application/merge-patch+json'
        },
        data=patch_body
      )

      print("HTTP status code: {}".format(response.status_code))

      if not response.ok:
        print(response.content)
        sys.exit(-1)
  post.py: |
    #!/usr/bin/env python
    #
    # This is a stupid python script I have to write because the certbot image
    #   doesn't come with curl installed, and the wget binary bundled with the
    #   busybox distro it's built off of doesn't seem to support different HTTP
    #   methods.
    # There may be a way to get around it, but the time to figure that out probably
    #   isn't worth it.
    import sys

    import requests

    if __name__ == '__main__':
      if len(sys.argv) != 4:
        print('Usage:', sys.argv[0], 'auth_header', 'post_body', 'host')

      auth_header, post_body, host = sys.argv[1:]

      response = requests.post(
        url=host,
        verify=False,
        headers={
          'Authorization': auth_header,
          'Content-Type': 'application/json'
        },
        data=post_body
      )

      print("HTTP status code: {}".format(response.status_code))

      if not response.ok:
        print(response.content)
        sys.exit(-1)
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: certbot-copy-to-${KUBERNETES_NAMESPACE}
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  schedule: "0 0 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: certbot-copy-to-${KUBERNETES_NAMESPACE}
        spec:
          restartPolicy: OnFailure
          serviceAccountName: certbot
          containers:
            - name: certbot-copy-to-${KUBERNETES_NAMESPACE}
              image: certbot/certbot
              command:
                - sh
                - /scripts/update-secrets.sh
              env:
                - name: KUBERNETES_NAMESPACE
                  value: ${KUBERNETES_NAMESPACE}
              volumeMounts:
                - name: certbot-storage
                  mountPath: /etc/letsencrypt
                - name: certbot-scripts
                  mountPath: /scripts
          volumes:
            - name: certbot-storage
              nfs:
                server: 192.168.96.4
                path: /mnt/main/apps/certificates
            - name: certbot-scripts
              configMap:
                name: certbot-update-script
                defaultMode: 0755
