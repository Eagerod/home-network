apiVersion: v1
kind: ServiceAccount
metadata:
  name: rotate-node-tagger
  namespace: dev
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: rotate-node-tagger
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["patch", "get", "list"]
apiVersion: rbac.authorization.k8s.io/v1
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rotate-node-tagger
subjects:
  - kind: ServiceAccount
    name: rotate-node-tagger
    namespace: dev
roleRef:
  kind: ClusterRole
  name: rotate-node-tagger
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: rotate-node-tagger
  namespace: dev
spec:
  schedule: "0 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: rotate-node-tagger
        spec:
          restartPolicy: OnFailure
          serviceAccountName: rotate-node-tagger
          imagePullSecrets:
            - name: registry.internal.aleemhaji.com
          containers:
            - name: rotate-node
              image: registry.internal.aleemhaji.com/kubectl:1.21.0
              command: 
                - bash
                - -eufo
                - pipefail
                - -c
                - |
                  node_template='{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}} {{index .metadata.labels "node-role.kubernetes.io/master"}}       
                  {{end}}'
                  nodes=($(kubectl get nodes -o template="$node_template" | awk '{if (NF != 2) print}' | sort -k2 | awk '{print $1}'))

                  node="${nodes[0]}"
                  kubectl label node $node --overwrite "aleemhaji.com/oldest=true"

                  nodes=("${nodes[@]:1}")
                  for node in ${nodes[@]}; do
                    kubectl label node $node --overwrite "aleemhaji.com/oldest=false"
                  done
