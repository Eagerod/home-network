apiVersion: v1
kind: ConfigMap
metadata:
  name: pihole-static-config
data:
  resolv.conf:
    nameserver 127.0.0.1
  02-lan.conf: |
    addn-hosts=/etc/pihole/lan.list
  03-kube.conf: |
    addn-hosts=/etc/pihole/kube.list
  lan.list: |
    192.168.1.42 trunk.internal.aleemhaji.com. trunk
    ${INGRESS_IP} internal.aleemhaji.com heimdall
    ${INGRESS_IP} pi.hole pihole
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pihole
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pihole-role
rules:
  - apiGroups: ["", "extensions"]
    resources: ["services", "ingresses"]
    verbs: ["list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pihole-manage-hostsfile
subjects:
  - kind: ServiceAccount
    name: pihole
    namespace: default
roleRef:
  kind: ClusterRole
  name: pihole-role
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pihole-update
rules:
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pihole-update
subjects:
  - kind: ServiceAccount
    name: pihole
roleRef:
  kind: Role
  name: pihole-update
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pihole-deployment
  labels:
    app: pihole
spec:
  revisionHistoryLimit: 0
  replicas: 2
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      name: pihole
      labels:
        app: pihole
    spec:
      serviceAccountName: pihole
      imagePullSecrets:
        - name: registry.internal.aleemhaji.com
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - pihole
                topologyKey: "kubernetes.io/hostname"
      # Since individual files don't reload the way that full directory mount
      #   do, copy files over to where they belong.
      # This prevents them from being read only, and lets me update the files
      #   however I want without needing to restart the pod.
      initContainers:
        - name: pihole-config
          image: registry.internal.aleemhaji.com/busybox:1.35.0
          volumeMounts:
            - name: pihole-static-config
              mountPath: pihole-static-config
            - name: config-root
              mountPath: config-root
          command:
            - sh
            - -c
            - |
              cp pihole-static-config/02-lan.conf config-root/ && \
              cp pihole-static-config/03-kube.conf config-root/ && \
              cp pihole-static-config/lan.list config-root/
      containers:
        - name: pihole
          image: registry.internal.aleemhaji.com/pihole:v5.8
          ports:
            - containerPort: 80
              protocol: TCP
            - containerPort: 53
              protocol: TCP
            - containerPort: 53
              protocol: UDP
          env:
            - name: WEBPASSWORD
              value: "123"
            - name: PIHOLE_DNS_
              value: "8.8.8.8;8.8.4.4"
            - name: DNSSEC
              value: "true"
          volumeMounts:
            - name: config-root
              mountPath: /etc/dnsmasq.d/02-lan.conf
              subPath: 02-lan.conf
            - name: pihole-static-config
              mountPath: /etc/resolv.conf
              subPath: resolv.conf
            - name: config-root
              mountPath: /etc/dnsmasq.d/03-kube.conf
              subPath: 03-kube.conf
            - name: config-root
              mountPath: /etc/pihole/lan.list
              subPath: lan.list
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - dig +norecurse +retry=0 "@127.0.0.1" pi.hole && [ -f /etc/pihole/kube.list ]
            failureThreshold: 60
            periodSeconds: 5
        - name: hostsfile-daemon
          # This introduces a fun circular dependency.
          # Pihole tells the network where registry.internal.aleemhaji.com is,
          #   but it needs to be there to start this pod.
          # Maybe I should have a temporary pihole pod without this hooked up
          #   to it, and once the registry is definitely up and resolvable,
          #   replace it with this pod?
          image: registry.internal.aleemhaji.com/hostsfile-daemon:0.4.0
          args:
            - --ingress-ip
            - ${INGRESS_IP}
            - --search-domain
            - internal.aleemhaji.com
      volumes:
        - name: pihole-static-config
          configMap:
            name: pihole-static-config
        - name: config-root
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-tcp
  labels:
    app: pihole
  annotations:
    metallb.universe.tf/allow-shared-ip: pihole
spec:
  ports:
    - port: 80
      protocol: TCP
      name: webserver
    - port: 53
      protocol: TCP
      name: dns
  type: LoadBalancer
  loadBalancerIP: ${LOAD_BALANCER_IP}
  selector:
    app: pihole
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-udp
  labels:
    app: pihole
  annotations:
    metallb.universe.tf/allow-shared-ip: pihole
spec:
  ports:
    - port: 53
      protocol: UDP
  type: LoadBalancer
  loadBalancerIP: ${LOAD_BALANCER_IP}
  selector:
    app: pihole
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pihole-ingress-redirect
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/temporal-redirect: https://pihole.internal.aleemhaji.com
spec:
  rules:
    - host: pihole
    - host: pihole.home
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pihole-special-redirect
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - host: pi.hole
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pihole-tcp
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pihole-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
    - hosts:
        - pihole.internal.aleemhaji.com
      secretName: internal-certificate-files
  rules:
    - host: pihole.internal.aleemhaji.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pihole-tcp
                port:
                  number: 80
