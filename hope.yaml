masters:
  - root@192.168.200.10
nodes:
  - ubuntu@192.168.200.10
  - ubuntu@192.168.200.11
loglevel: trace
pod_network_cidr: 10.244.0.0/16
resources:
  - name: flannel
    file: https://raw.githubusercontent.com/coreos/flannel/v0.12.0/Documentation/kube-flannel.yml
  - name: flannel-rbac
    file: https://raw.githubusercontent.com/coreos/flannel/v0.12.0/Documentation/k8s-manifests/kube-flannel-rbac.yml
  - name: dashboard
    file: https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
  - name: metrics-server
    file: https://raw.githubusercontent.com/Eagerod/home-network/9b54ad7ca495b8b64cdd6bcfa974688b7e39e711/metrics-server.yaml
  - name: personal-service-account
    inline: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: aleem
        namespace: kube-system
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: aleem
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: aleem
        namespace: kube-system
  - name: load-balancer-namespace
    file: https://raw.githubusercontent.com/metallb/metallb/v0.8.3/manifests/namespace.yaml
  - name: load-balancer
    file: https://raw.githubusercontent.com/metallb/metallb/v0.8.3/manifests/metallb.yaml
  - name: load-balancer-config
    inline: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: metallb-system
        name: config
      data:
        config: |
          address-pools:
          - name: default
            protocol: layer2
            addresses:
            - 192.168.200.32-192.168.200.224
  - name: ingress-controller-configs
    inline: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: tcp-services
      data:
        5432: "default/postgres:5432"
        6379: "default/redis:6379"
      ---
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: udp-services
      data:
      ---
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: ingress-nginx-controller
        namespace: ingress-nginx
      data:
        http-redirect-code: "302"
  - name: ingress-controller
    file: nginx-ingress-plus-tcp-udp-proxy.yaml
  - name: ingress-controller-service
    inline: |
      apiVersion: v1
      kind: Service
      metadata:
        name: nginx-ingress-tcp
        labels:
          app: nginx-ingress
        namespace: ingress-nginx
        annotations:
          metallb.universe.tf/allow-shared-ip: ingress
      spec:
        ports:
        - port: 53
          name: dns
          protocol: TCP
        - port: 80
          name: http
          protocol: TCP
        - port: 443
          name: https
          protocol: TCP
        - port: 5432
          name: postgres
          protocol: TCP
        - port: 6379
          name: redis
          protocol: TCP
        type: LoadBalancer
        loadBalancerIP: 192.168.200.128
        selector:
          app.kubernetes.io/name: ingress-nginx
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: nginx-ingress-udp
        labels:
          app: nginx-ingress
        namespace: ingress-nginx
        annotations:
          metallb.universe.tf/allow-shared-ip: ingress
      spec:
        ports:
        - port: 53
          name: dns
          protocol: UDP
        type: LoadBalancer
        loadBalancerIP: 192.168.200.128
        selector:
          app.kubernetes.io/name: ingress-nginx
  - name: kubernetes-dashboard-ingress
    inline: |
      apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        namespace: kube-system
        name: dashboard-ingress-redirect
        annotations:
          kubernetes.io/ingress.class: "nginx"
          nginx.ingress.kubernetes.io/temporal-redirect: https://dashboard.internal.aleemhaji.com
      spec:
        rules:
          - host: dashboard
          - host: dashboard.home
      ---
      apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        namespace: kube-system
        name: dashboard-ingress
        annotations:
          kubernetes.io/ingress.class: "nginx"
          nginx.ingress.kubernetes.io/backend-protocol: "https"
      spec:
        tls:
          - hosts:
              - dashboard.internal.aleemhaji.com
            secretName: internal-certificate-files
        rules:
          - host: dashboard.internal.aleemhaji.com
            http:
              paths:
                - path: /
                  backend:
                    serviceName: kubernetes-dashboard
                    servicePort: 443
  - name: docker-registry-secrets
    inline: |
      apiVersion: v1
      data:
        .dockerconfigjson: ${DOCKER_CONFIG_JSON_FILE_CONTENTS_BASE64}
      kind: Secret
      metadata:
        name: ${DOCKER_REGISTRY_HOSTNAME}
      type: kubernetes.io/dockerconfigjson
      ---
      apiVersion: v1
      data:
        htpasswd: ${DOCKER_HTPASSWD_FILE_CONTENTS_BASE64}
      kind: Secret
      metadata:
        name: ${DOCKER_REGISTRY_HOSTNAME}-htpasswd
    parameters:
      - DOCKER_REGISTRY_HOSTNAME
      - DOCKER_HTPASSWD_FILE_CONTENTS_BASE64
      - DOCKER_CONFIG_JSON_FILE_CONTENTS_BASE64
  - name: docker-registry
    file: registry/registry.yaml
  - name: browser
    file: browser/browser.yaml
  - name: heimdall
    file: heimdall/heimdall.yaml
  - name: trilium
    file: trilium/trilium.yaml
  - name: slackbot-image
    build:
      path: slackbot
      tag: registry.internal.aleemhaji.com/slackbot:latest
  - name: slackbot-config
    inline: |
      apiVersion: v1
      data:
        alerting_channel: ${SLACK_BOT_ALERTING_CHANNEL}
        default_channel: ${SLACK_BOT_DEFAULT_CHANNEL}
      kind: ConfigMap
      metadata:
        name: slack-bot-config
      ---
      apiVersion: v1
      data:
        api_key: ${SLACK_BOT_API_KEY_BASE64}
      kind: Secret
      metadata:
        name: slack-bot-secrets
    parameters:
      - SLACK_BOT_ALERTING_CHANNEL
      - SLACK_BOT_DEFAULT_CHANNEL
      - SLACK_BOT_API_KEY_BASE64
  - name: slackbot
    file: slackbot/slackbot.yaml
  - name: firefly-config
    inline: |
      apiVersion: v1
      data:
        mysql_user: ${FIREFLY_MYSQL_USER}
        mysql_database: ${FIREFLY_MYSQL_DATABASE}
      kind: ConfigMap
      metadata:
        name: firefly-config
      ---
      apiVersion: v1
      data:
        mysql_password: ${FIREFLY_MYSQL_PASSWORD_BASE64}
        app_key: ${FIREFLY_APP_KEY_BASE64}
      kind: Secret
      metadata:
        name: firefly-secrets
    parameters:
      - FIREFLY_MYSQL_USER
      - FIREFLY_MYSQL_DATABASE
      - FIREFLY_MYSQL_PASSWORD_BASE64
      - FIREFLY_APP_KEY_BASE64
  - name: firefly-init-job-create
    file: firefly/firefly-init.yaml
  - name: firefly-init-job
    job: firefly-mysql-init
  - name: firefly
    file: firefly/firefly.yaml
  - name: guacamole-config
    inline: |
      apiVersion: v1
      data:
        mysql_user: ${GUACAMOLE_MYSQL_USER}
        mysql_database: ${GUACAMOLE_MYSQL_DATABASE}
      kind: ConfigMap
      metadata:
        name: guacamole-config
      ---
      apiVersion: v1
      data:
        mysql_password: ${GUACAMOLE_MYSQL_PASSWORD_BASE64}
      kind: Secret
      metadata:
        name: guacamole-secrets
    parameters:
      - GUACAMOLE_MYSQL_USER
      - GUACAMOLE_MYSQL_DATABASE
      - GUACAMOLE_MYSQL_PASSWORD_BASE64
  - name: guacamole-init-job-create
    file: guacamole/guacamole-init.yaml
  - name: guacamole-init-job
    job: guacamole-mysql-init
  - name: guacamole
    file: guacamole/guacamole.yaml
  - name: resilio-sync-config
    inline: |
      apiVersion: v1
      data:
        username: ${RESILIO_SERVER_USERNAME}
      kind: ConfigMap
      metadata:
        name: resilio-sync-config
      ---
      apiVersion: v1
      data:
        password: ${RESILIO_SERVER_PASSWORD_BASE64}
      kind: Secret
      metadata:
        name: resilio-sync-secrets
    parameters:
      - RESILIO_SERVER_USERNAME
      - RESILIO_SERVER_PASSWORD_BASE64
  - name: resilio-sync-image
    build:
      path: resilio-sync
      tag: registry.internal.aleemhaji.com/resilio:latest
  - name: resilio-sync
    file: resilio-sync/resilio-sync.yaml
  - name: node-red-config
    inline: |
      apiVersion: v1
      data:
        mysql_user: ${NODE_RED_MYSQL_USER}
        mysql_database: ${NODE_RED_MYSQL_DATABASE}
      kind: ConfigMap
      metadata:
        name: node-red-config
      ---
      apiVersion: v1
      data:
        mysql_password: ${NODE_RED_MYSQL_PASSWORD_BASE64}
      kind: Secret
      metadata:
        name: node-red-secrets
    parameters:
      - NODE_RED_MYSQL_USER
      - NODE_RED_MYSQL_DATABASE
      - NODE_RED_MYSQL_PASSWORD_BASE64
  - name: node-red-image
    build:
      path: node-red
      tag: registry.internal.aleemhaji.com/node-red:latest
  - name: node-red-init-job-create
    file: node-red/node-red-init.yaml
  - name: node-red-init-job
    job: node-red-mysql-init
  - name: node-red
    file: node-red/node-red.yaml
  - name: redis
    file: redis/redis.yaml
  - name: postgres-config
    inline: |
      apiVersion: v1
      data:
        root_password: ${POSTGRES_ROOT_PASSWORD_BASE64}
      kind: Secret
      metadata:
        name: postgres-secrets
    parameters:
      - POSTGRES_ROOT_PASSWORD_BASE64
  - name: postgres-block-storage
    file: postgres/postgres-block-storage.yaml
  - name: postgres
    file: postgres/postgres.yaml
  - name: mysql-block-storage
    file: mysql/mysql-block-storage.yaml
  - name: mysql-config
    inline: |
      apiVersion: v1
      data:
        root_password: ${MYSQL_ROOT_PASSWORD_BASE64}
      kind: Secret
      metadata:
        name: mysql-secrets
    parameters:
      - MYSQL_ROOT_PASSWORD_BASE64
  - name: mysql-backup
    inline: |
      apiVersion: v1
      data:
        mysql-backup.sh: |
          #!/bin/sh
          set -e

          if [ -z "${MYSQL_HOST}" ]; then
              echo >&2 "Must provide MYSQL_HOST to backup"
              exit 1
          fi

          if [ -z "${MYSQL_PWD}" ]; then
              echo >&2 "Must provide MYSQL_PWD for root@${MYSQL_HOST}"
              exit 2
          fi

          mysql -h ${MYSQL_HOST} -u root -s -N -e "show databases;" | while read database; do
              if [ "$database" = "information_schema" ] || [ "$database" = "mysql" ] || [ "$database" = "sys" ] || [ "$database" = "performance_schema" ]; then
                  echo >&2 "Skipping database $database"
                  continue
              fi

              echo >&2 "Backing up database: $database"
              mkdir -p "/var/lib/backups/$database"
              mysql -h ${MYSQL_HOST} -u root -s -N -c "$database" -e "show tables;" | while read table; do
                  mysqldump -h ${MYSQL_HOST} -u root --skip-dump-date "$database" "$table" > "/var/lib/backups/$database/$table.sql"
              done || exit 1
          done || exit 1
      kind: ConfigMap
      metadata:
        name: mysql-backup
  - name: mysql
    file: mysql/mysql.yaml
jobs:
  - name: mysql-restore
    file: mysql/tasks/mysql-restore.yaml
    parameters:
      - MYSQL_DATABASE_NAME
  - name: mysql-drop
    file: mysql/tasks/mysql-drop.yaml
    parameters:
      - MYSQL_DATABASE_NAME
